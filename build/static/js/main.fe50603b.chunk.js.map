{"version":3,"sources":["Context/StateContext.tsx","Components/EditableTable.tsx","Context/useStateContent.tsx","Components/DisplayTable.tsx","Context/Sidebar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getRandomId","Math","floor","random","toString","initialState","Array","map","_","id","items","x","i","rows","functions","state","rowId","colNo","value","rowIndex","findIndex","rowValue","rowItems","newState","Object","values","console","log","filter","reducer","data","tempState","key","func","initialContext","StateContext","React","StateContextProvider","children","dispatch","Provider","headings","EditableTable","useContext","useEffect","fetch","then","res","json","catch","err","error","style","flexGrow","padding","onClick","className","h","row","cell","type","onChange","e","target","body","JSON","stringify","drugs","method","headers","DisplayTable","useState","setRows","Navbar","top","left","width","textAlign","background","to","fontSize","color","cursor","App","Sidebar","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe50603b.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\ninterface IDrug {\r\n   name: string;\r\n   id: string;\r\n   generic: string;\r\n   brand: string;\r\n}\r\n\r\nexport interface IRow {\r\n   id: string;\r\n   items: string[];\r\n}\r\n\r\ninterface IState {\r\n   rows: IRow[];\r\n}\r\nconst getRandomId = () => {\r\n   return Math.floor(Math.random() * 10000000).toString();\r\n};\r\n\r\nconst initialData: IRow[] = [...Array(10)].map((_) => ({\r\n   id: getRandomId(),\r\n   items: [...Array(3)].map((x, i) => \"Data\"),\r\n}));\r\n\r\nexport const initialState: IState = {\r\n   rows: [],\r\n};\r\ntype ActionType = {\r\n   \"set-rows\": IRow[];\r\n   \"set-cell-value\": { rowId: string; colNo: number; value: string };\r\n   \"delete-row\": string;\r\n   \"add-row\": \"\";\r\n};\r\n\r\ntype ActionName = keyof ActionType;\r\n\r\nexport const functions: {\r\n   [k in ActionName]: (state: IState, data: ActionType[k]) => IState;\r\n} = {\r\n   \"set-rows\": (state, rows) => ({ ...state, rows }),\r\n   \"set-cell-value\": (state, { rowId, colNo, value }) => {\r\n      const rowIndex = state.rows.findIndex((x) => x.id === rowId);\r\n      const rowValue = state.rows[rowIndex];\r\n      const rowItems = rowValue.items;\r\n      const newState = {\r\n         ...state,\r\n         rows: Object.values({\r\n            ...state.rows,\r\n            [rowIndex]: {\r\n               ...rowValue,\r\n               items: Object.values({ ...rowItems, [colNo]: value }),\r\n            },\r\n         }),\r\n      } as IState;\r\n      console.log(newState);\r\n      return { ...newState };\r\n   },\r\n   \"delete-row\": (state, rowId) => ({\r\n      ...state,\r\n      rows: state.rows.filter((x) => x.id !== rowId),\r\n   }),\r\n   \"add-row\": (state) => ({\r\n      ...state,\r\n      rows: [\r\n         ...state.rows,\r\n         { id: getRandomId(), items: [\"Name\", \"Generic\", \"Brand\"] },\r\n      ],\r\n   }),\r\n};\r\n\r\nconst reducer = (state: IState, data: Partial<ActionType>): IState => {\r\n   console.log(\"reduere function called\");\r\n   let tempState: IState = state;\r\n   for (let key in data) {\r\n      key = key as ActionName;\r\n      const func = functions[key as ActionName];\r\n      const dataToPass = (data as any)[key];\r\n      tempState = func(tempState, dataToPass);\r\n   }\r\n   return tempState;\r\n};\r\n\r\ntype IStateContext = [IState, React.Dispatch<Partial<ActionType>>];\r\nconst initialContext: IStateContext = [initialState, () => {}];\r\nexport const StateContext = React.createContext(initialContext);\r\nexport const StateContextProvider: React.FC = ({ children }) => {\r\n   const [state, dispatch] = React.useReducer(reducer, initialState);\r\n   return (\r\n      <StateContext.Provider value={[state, dispatch]}>\r\n         {children}\r\n      </StateContext.Provider>\r\n   );\r\n};\r\nexport const x = 3;\r\n","import { useEffect } from \"react\";\r\nimport { useStateContext } from \"../Context/useStateContent\";\r\n\r\nconst headings = [\"Sr no\", \"Drug Name\", \"Drug Generic\", \"Drug Brand\"];\r\n\r\nconst EditableTable: React.FC = () => {\r\n   const [{ rows }, dispatch] = useStateContext();\r\n\r\n   const onInputValueChange = (rowId: string, colNo: number, value: string) => {\r\n      dispatch({ \"set-cell-value\": { colNo, rowId, value } });\r\n   };\r\n   useEffect(() => {\r\n      fetch(\"/api/rows\")\r\n         .then((res) => {\r\n            res.json()\r\n               .then((rows) => {\r\n                  console.log(rows);\r\n                  dispatch({ \"set-rows\": rows });\r\n               })\r\n               .catch((err) => console.error(err));\r\n         })\r\n         .catch((err) => console.error(err));\r\n   }, []);\r\n   const saveData = () => {\r\n      fetch(\"/api/rows\", {\r\n         body: JSON.stringify({ drugs: rows }),\r\n         method: \"POST\",\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n      });\r\n   };\r\n\r\n   return (\r\n      <div style={{ flexGrow: 1, padding: \"20px\" }}>\r\n         <button\r\n            onClick={() => dispatch({ \"add-row\": \"\" })}\r\n            className=\"btn w-50 mb-4\"\r\n         >\r\n            Add new Drug\r\n         </button>\r\n         <table className=\"table\">\r\n            <thead>\r\n               <tr>\r\n                  {headings.map((h) => (\r\n                     <th>{h}</th>\r\n                  ))}\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               {rows.map((row, i) => (\r\n                  <tr>\r\n                     <td>{i}</td>\r\n                     {row.items.map((cell, i) => (\r\n                        <td>\r\n                           <input\r\n                              className=\"form-control\"\r\n                              type=\"text\"\r\n                              value={cell}\r\n                              onChange={(e) =>\r\n                                 onInputValueChange(row.id, i, e.target.value)\r\n                              }\r\n                           />\r\n                        </td>\r\n                     ))}\r\n                     <td>\r\n                        <button\r\n                           className=\"btn\"\r\n                           onClick={() => dispatch({ \"delete-row\": row.id })}\r\n                        >\r\n                           Delete\r\n                        </button>\r\n                     </td>\r\n                  </tr>\r\n               ))}\r\n            </tbody>\r\n         </table>\r\n         <button className=\"btn w-50\" onClick={saveData}>\r\n            Save\r\n         </button>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default EditableTable;\r\n","import { useContext } from \"react\";\r\nimport { StateContext } from \"./StateContext\";\r\n\r\nexport const useStateContext = () => useContext(StateContext);\r\n","import { useEffect, useState } from \"react\";\r\nimport { IRow } from \"../Context/StateContext\";\r\nimport { useStateContext } from \"../Context/useStateContent\";\r\n\r\nconst headings = [\"Sr no\", \"Drug Name\", \"Drug Generic\", \"Drug Brand\"];\r\n\r\nconst DisplayTable: React.FC = () => {\r\n   const [rows, setRows] = useState<IRow[]>([]);\r\n\r\n   useEffect(() => {\r\n      fetch(\"/api/rows\")\r\n         .then((res) => {\r\n            res.json()\r\n               .then((rows) => {\r\n                  console.log(rows);\r\n                  setRows(rows);\r\n               })\r\n               .catch((err) => console.error(err));\r\n         })\r\n         .catch((err) => console.error(err));\r\n   }, []);\r\n   return (\r\n      <div style={{ flexGrow: 1, padding: \"20px\" }}>\r\n         <h1 className=\"mb-5\">Drugs Data</h1>\r\n         <table className=\"table\">\r\n            <thead>\r\n               <tr>\r\n                  {headings.map((h) => (\r\n                     <th>{h}</th>\r\n                  ))}\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               {rows.map((row, i) => (\r\n                  <tr>\r\n                     <td>{i}</td>\r\n                     {row.items.map((cell, i) => (\r\n                        <td>{cell}</td>\r\n                     ))}\r\n                  </tr>\r\n               ))}\r\n            </tbody>\r\n         </table>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default DisplayTable;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst Navbar: React.FC = () => {\r\n   return (\r\n      <div\r\n         className=\"d-flex align-items-center nav\"\r\n         style={{\r\n            top: 0,\r\n            left: 0,\r\n            width: \"100%\",\r\n            textAlign: \"left\",\r\n            background: \"#48A3F7\",\r\n         }}\r\n      >\r\n         <Link to=\"/\">\r\n            <div\r\n               className=\"w-100 px-3 py-2\"\r\n               style={{\r\n                  fontSize: \"25px\",\r\n                  color: \"whitesmoke\",\r\n                  cursor: \"pointer\",\r\n               }}\r\n            >\r\n               <i className=\"fas fa-home mr-3\"></i>Home\r\n            </div>\r\n         </Link>\r\n         <Link to=\"/edit\">\r\n            <div\r\n               className=\"w-100 px-3 py-2\"\r\n               style={{\r\n                  fontSize: \"25px\",\r\n                  color: \"whitesmoke\",\r\n                  cursor: \"pointer\",\r\n               }}\r\n            >\r\n               <i className=\"fas fa-edit mr-3\"></i>Display\r\n            </div>\r\n         </Link>\r\n         <Link to=\"/page1\">\r\n            <div\r\n               className=\"w-100 px-3 py-2\"\r\n               style={{\r\n                  fontSize: \"25px\",\r\n                  color: \"whitesmoke\",\r\n                  cursor: \"pointer\",\r\n               }}\r\n            >\r\n               Page 1\r\n            </div>\r\n         </Link>\r\n         <Link to=\"/page2\">\r\n            <div\r\n               className=\"w-100 px-3 py-2\"\r\n               style={{\r\n                  fontSize: \"25px\",\r\n                  color: \"whitesmoke\",\r\n                  cursor: \"pointer\",\r\n               }}\r\n            >\r\n               Page 2\r\n            </div>\r\n         </Link>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Swiper from \"./Swiper\";\nimport EditableTable from \"./Components/EditableTable\";\nimport { StateContextProvider } from \"./Context/StateContext\";\nimport DisplayTable from \"./Components/DisplayTable\";\nimport Sidebar from \"./Context/Sidebar\";\nimport { BrowserRouter, Switch, Route, HashRouter } from \"react-router-dom\";\nfunction App() {\n   return (\n      <HashRouter>\n         <div className=\"App\">\n            <StateContextProvider>\n               <Sidebar></Sidebar>\n               <Switch>\n                  <Route exact path=\"/\">\n                     <EditableTable></EditableTable>\n                  </Route>\n                  <Route exact path=\"/edit\">\n                     <DisplayTable></DisplayTable>\n                  </Route>\n               </Switch>\n            </StateContextProvider>\n         </div>\n      </HashRouter>\n   );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}